{"title":"Windows脱壳-基础","uid":"d5e1f921b320f1d632be0f3eb7b4b1ce","slug":"Windows脱壳-基础","date":"2020-10-25T03:08:33.000Z","updated":"2022-12-30T15:19:13.929Z","comments":true,"path":"api/articles/Windows脱壳-基础.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/29/JgdMGRJU.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>旅行者,本破站点旨在原创文章记录学习经历&amp;&amp;收集优秀资源减少学习成本，如果您又更好的想法请联系我。让我们一起传承开源精神🤓……</p></blockquote>\n<h1 id=\"知识点回顾\"><a href=\"#知识点回顾\" class=\"headerlink\" title=\"知识点回顾\"></a>知识点回顾</h1><p>1、PE文件的Magic code(魔数、幻数)是什么？</p>\n<p> MZ头、PE头</p>\n<p>2、PE文件中文件头的信息有哪些？</p>\n<p> 运行平台、时间戳、PE文件属性、区段数量、扩展头的大小</p>\n<p>3、PE文件中扩展头的信息有哪些？</p>\n<p> EP的RVA、ImageBase(400000)、代码段起始地址、数据段起始地址 数据目录表、数据目录表项数量、文件对齐、内存对齐、映像总大小</p>\n<p>4、 PE文件中区段信息有哪些？</p>\n<p> 区段名称、虚拟地址、虚拟大小、文件偏移、文件大小、区段属性(C0000020、60000020)</p>\n<p>5、PE文件中数据目录表有哪些表？</p>\n<p> 导出表、导入表、异常表、tls表、资源表、IAT、重定位表</p>\n<p>6、一个进程，三环下有哪些数据结构？</p>\n<p> 进程环境块(PEB)、线程环境块(TEB)、tls结构</p>\n<p>7、导入表结构体字段有几个，分别是什么？</p>\n<p> 5个字段</p>\n<p> 第一个是OrginalFirstThunk,里面是rva,指向的INT，</p>\n<p> 第二个是时间戳，</p>\n<p> 第三个是转发机 制用到的ForWarderChain,</p>\n<p> 第四个是name,rva,dll名称字符串，</p>\n<p> 第五个是FirstThunk，指向的是 IAT。 INT或IAT在文件中存的是一样的，存的是指向名称字符串的rva或者一个序号</p>\n<h1 id=\"手工加壳\"><a href=\"#手工加壳\" class=\"headerlink\" title=\"手工加壳\"></a>手工加壳</h1><p>目标：将代码段加密，以防止IDA等静态工具分析。</p>\n<p>步骤：</p>\n<ol>\n<li>添加一个区段(文件大小、区段数量)</li>\n<li>将原OEP修改为新区段中的地址</li>\n<li>将代码段异或加密</li>\n<li>在新区段新OEP处，添加异或解密代码</li>\n</ol>\n<p>注意: ① 代码段默认没有可写属性，需要修改。 ② 有随机基址属性的程序会重定位代码，一般我们会去掉这个属性 如果没有去掉，就需要在壳代码中进行重定位</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"添加区段\"><a href=\"#添加区段\" class=\"headerlink\" title=\"添加区段\"></a>添加区段</h3><img src=\"https://img1.imgtp.com/2022/12/29/lHKGDsEU.png\" alt=\"1.png\" title=\"1.png\" />\n\n<p>使用LordPE编辑区段信息</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/psWy9o2E.png\" alt=\"2.png\" title=\"2.png\" />\n\n<p>再使用010Editor添加文件数据</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/NNlP654x.png\" alt=\"3.png\" title=\"3.png\" />\n\n<h3 id=\"修改OEP，增加OEP代码\"><a href=\"#修改OEP，增加OEP代码\" class=\"headerlink\" title=\"修改OEP，增加OEP代码\"></a>修改OEP，增加OEP代码</h3><p>原OEP：000011D2 新OEP：17000 修改OEP</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/1TSmOKhV.png\" alt=\"4.png\" title=\"4.png\" />\n\n<p>添加代码</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/MYsQJg24.png\" alt=\"5.png\" title=\"5.png\" />\n\n<p>通过技巧获取基地址再跳转</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/vxbF1S02.png\" alt=\"6.png\" title=\"6.png\" />\n\n<p>另一种改法</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/c9SWMXOx.png\" alt=\"7.png\" title=\"7.png\" />\n\n<p>关于代码的演化</p>\n<p>① 如果直接去掉随机基址，我们可以在新OEP处，直接写代码跳转到原始OEP</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/rmDgFbXs.png\" alt=\"8.png\" title=\"8.png\" />\n\n<p>② 我们可以在新OEP处定义出模块基地址，然后再加上原始OEP RVA</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/DY4abdDJ.png\" alt=\"9.png\" title=\"9.png\" />\n\n<p>③ 可以在新OEP处通过call pop 组合获取当前指令地址，再减去偏移，计算出模块基址</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/ouslC3TD.png\" alt=\"10.png\" title=\"10.png\" />\n\n<p>以上代码的机器码复制到有随机基址的同一程序同一位置中，同样也是可以正常运行的</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/gcQFV01s.png\" alt=\"11.png\" title=\"11.png\" />\n\n<h3 id=\"加密代码段\"><a href=\"#加密代码段\" class=\"headerlink\" title=\"加密代码段\"></a>加密代码段</h3><p>代码段信息</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/HNLs9RMG.png\" alt=\"12.png\" title=\"12.png\" />\n\n<p>在010Editor中操作代码段</p>\n<p>选中代码段</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/p8uPZ8Lu.png\" alt=\"13.png\" title=\"13.png\" />\n\n<p>异或代码段</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/6EjOzXfy.png\" alt=\"14.png\" title=\"14.png\" />\n\n<h3 id=\"增加解密代码\"><a href=\"#增加解密代码\" class=\"headerlink\" title=\"增加解密代码\"></a>增加解密代码</h3><p>由于代码段本身有重定位信息，那么如果加密之后，重定位会出现问题，所以应该去掉随机基址 40 81 -&gt; 00 81</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/7Fg9raiA.png\" alt=\"15.png\" title=\"15.png\" />\n\n<h1 id=\"脱壳\"><a href=\"#脱壳\" class=\"headerlink\" title=\"脱壳\"></a>脱壳</h1><h2 id=\"脱壳的目的：\"><a href=\"#脱壳的目的：\" class=\"headerlink\" title=\"脱壳的目的：\"></a>脱壳的目的：</h2><ol>\n<li>Cracker(破解者) 脱壳、解密、破解</li>\n<li>杀毒引擎(脱壳引擎、反病毒虚拟机) 解密、查杀病毒、扫描特征</li>\n</ol>\n<h2 id=\"脱壳的步骤：\"><a href=\"#脱壳的步骤：\" class=\"headerlink\" title=\"脱壳的步骤：\"></a>脱壳的步骤：</h2><ol>\n<li><p>找到原始OEP</p>\n<p>一般来说，找到原始OEP或者我们跟踪到原始OEP时，程序都会完成解密操作</p>\n</li>\n<li><p>Dump内存到文件</p>\n<p>当可执行文件在内存已经完成解密之后，我们将内存中代码数据转储(dump)到文件，就可以进 行进一步分析。</p>\n</li>\n<li><p>修复文件(常见于修复IAT，重建导入表)</p>\n<p>从内存中转储的内存数据代码有一些与原本文件中的内容是不一致的。比如说IAT表，内存中IAT 表会被初始为函数地址表，而文件中IAT表与INT表内容一致。所以要想让程序正常运行，一般 都需要修复IAT，因为加壳之后程序一般都会自己去处理导入表、IAT以及重定位等。</p>\n</li>\n</ol>\n<h2 id=\"导入表和IAT\"><a href=\"#导入表和IAT\" class=\"headerlink\" title=\"导入表和IAT\"></a>导入表和IAT</h2><p><img src=\"https://img1.imgtp.com/2022/12/29/XqwLdfcH.png\" alt=\"16.png\" title=\"16.png\" />)</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/tadZbvJ4.png\" alt=\"17.png\" title=\"17.png\" />\n\n<h2 id=\"脱自己加的壳\"><a href=\"#脱自己加的壳\" class=\"headerlink\" title=\"脱自己加的壳\"></a>脱自己加的壳</h2><ol>\n<li><p>找到原始OEP</p>\n<p>单步跟踪，很容易找到原始OEP</p>\n</li>\n<li><p>Dump内存到文件</p>\n<p>在原始OEP处进行DUMP内存，原因就是这个时候内存没有做太多的初始化</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/3wZclkrq.png\" alt=\"18.png\" title=\"18.png\" />\n\n<p>3.修复IAT或者修复导入表</p>\n<p>使用ImportREC修复</p>\n</li>\n</ol>\n<img src=\"https://img1.imgtp.com/2022/12/29/YpP7KQ5Q.png\" alt=\"19.png\" title=\"19.png\" />\n\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>脱壳是一项综合技术，结合PE文件格式、汇编指令的分析，调试加密的程序并将其还原的一 个过程。</p>\n<p>壳一般分为两种，加密壳和压缩壳，里面所使用的技术有，压缩算法、对代码加密、对IAT 加密、对资源加密。 我们从简单入手-压缩壳。</p>\n<h2 id=\"关于压缩算法\"><a href=\"#关于压缩算法\" class=\"headerlink\" title=\"关于压缩算法\"></a>关于压缩算法</h2><ol>\n<li>有损压缩 一个像素点：RGB 红绿蓝 一个图片：(3,4,5),(4,5,3),(5,4,3) 压缩后：(4,4,4),3</li>\n<li>无损压缩 一个文件：0,0,0,0,0,0,0 压缩后：0,7</li>\n</ol>\n<h2 id=\"脱壳三步法\"><a href=\"#脱壳三步法\" class=\"headerlink\" title=\"脱壳三步法\"></a>脱壳三步法</h2><ol>\n<li>寻找原始OEP</li>\n<li>dump内存到文件</li>\n<li>修复文件</li>\n</ol>\n<h3 id=\"脱壳三步法-寻找OEP技巧\"><a href=\"#脱壳三步法-寻找OEP技巧\" class=\"headerlink\" title=\"脱壳三步法-寻找OEP技巧\"></a>脱壳三步法-寻找OEP技巧</h3><ol>\n<li><p>堆栈平衡法(ESP定律</p>\n<p>壳代码就像一个函数，进入时会开辟堆栈、保存寄存器环境，退出时会恢复堆栈、恢复 寄存器。所以应该是堆栈平衡的，那我们可以在壳代码操作了堆栈后对堆栈设置访问或 写入断点，然后运行程序，当断点命中的时候，应该就是退出壳代码的时候。在其附近 单步几次，应该就能到达程序的原始OEP。</p>\n</li>\n<li><p>特征定位法</p>\n<p>在我们熟悉的程序中，我们可以使用特征来定位程序原始OEP。特征有几种： ① 二进制特征 比如release版的VS2013是: oep入口特征：E8????????E9 第一个CALL内的特征:5657BF4EE640BBBE0000FFFF3BC7 ② API特征 比如release版的VS2013的第一个API调用是： GetSystemTimeAsFileTime 比如vc6.0的第一个API调用是： GetVersion 比如Delphi程序第一个API调用是： GetModuleHandleA ③编译器特征 IAT调用不同的编译器生成的调用机器码是不一样 vs -》 call [IAT地址] -》 FF15 xx xx xx xx delphi -&gt; jmp [IAT地址] -》 FF25 xx xx xx xx</p>\n</li>\n</ol>\n<h1 id=\"脱壳练习\"><a href=\"#脱壳练习\" class=\"headerlink\" title=\"脱壳练习\"></a>脱壳练习</h1><h2 id=\"壳代码的基本流程\"><a href=\"#壳代码的基本流程\" class=\"headerlink\" title=\"壳代码的基本流程\"></a>壳代码的基本流程</h2><p>① 保存寄存器环境</p>\n<p>② 加载一些必要的API</p>\n<p>③ 解密代码和数据</p>\n<p>④ 修复重定位</p>\n<p>⑤ 填充IAT</p>\n<p>⑥ 恢复寄存器环境</p>\n<h2 id=\"脱壳-0-aspack-exe\"><a href=\"#脱壳-0-aspack-exe\" class=\"headerlink\" title=\"脱壳-0.aspack.exe\"></a>脱壳-0.aspack.exe</h2><h3 id=\"壳代码分析\"><a href=\"#壳代码分析\" class=\"headerlink\" title=\"壳代码分析\"></a>壳代码分析</h3><h4 id=\"1、壳OEP\"><a href=\"#1、壳OEP\" class=\"headerlink\" title=\"1、壳OEP\"></a>1、壳OEP</h4><img src=\"https://img1.imgtp.com/2022/12/29/qG93GIQN.png\" alt=\"20.png\" title=\"20.png\" />\n\n<h4 id=\"2、加载必要API\"><a href=\"#2、加载必要API\" class=\"headerlink\" title=\"2、加载必要API\"></a>2、加载必要API</h4><img src=\"https://img1.imgtp.com/2022/12/29/DzUWBVML.png\" alt=\"21.png\" title=\"21.png\" />\n\n<h4 id=\"3、解密解压缩代码\"><a href=\"#3、解密解压缩代码\" class=\"headerlink\" title=\"3、解密解压缩代码\"></a>3、解密解压缩代码</h4><img src=\"https://img1.imgtp.com/2022/12/29/cbTWGCtW.png\" alt=\"22.png\" title=\"22.png\" />\n\n<h4 id=\"4、修复重定位\"><a href=\"#4、修复重定位\" class=\"headerlink\" title=\"4、修复重定位\"></a>4、修复重定位</h4><img src=\"https://img1.imgtp.com/2022/12/29/sVEEPu8l.png\" alt=\"23.png\" title=\"23.png\" />\n\n<p>修复重定位的公式：</p>\n<p>重定位表中存储两个有用字段：</p>\n<ol>\n<li>需要重定位的分页地址</li>\n<li>需要重定位的分页偏移 重定位分为两步：</li>\n<li>计算出 重定位地址，要重定位的地址&#x3D;模块基地址+分页地址+分页偏移</li>\n<li>修复要重定位的地址中数据，[要重定位的地址] - 默认模块基地址 + 当前模块基地址</li>\n</ol>\n<h4 id=\"5、填充IAT\"><a href=\"#5、填充IAT\" class=\"headerlink\" title=\"5、填充IAT\"></a>5、填充IAT</h4><p>原理：</p>\n<p>① 从导入表中获取dll名称</p>\n<p>② 从导入表中的INT，获取函数名称或者序号</p>\n<p>③ 通过GetModuleHandleA或者LoadLibraryA获取模块基地址、通过GetProcAddress获取函数地址</p>\n<p>④ 将函数地址填充到对应IAT数组中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">001D726F 03F2 ADD ESI,EDX \t\t\t\t\t\t\t\t; esi&#x3D;导入表结构\n001D7271 8B46 0C MOV EAX,DWORD PTR DS:[ESI+0xC] \t\t; 获取模块DLL名称RVA\n001D7274 85C0 TEST EAX,EAX\n001D7276 0F84 0D010000 JE 00_aspac.001D7389\n001D727C 03C2 ADD EAX,EDX \t\t\t\t\t\t\t\t; 加上基地址，字符串VA\n001D727E 8BD8 MOV EBX,EAX\n001D7280 50 PUSH EAX\n001D7281 FF95 A90F0000 CALL DWORD PTR SS:[EBP+0xFA9] \t; 获取模块基地址\n001D7287 85C0 TEST EAX,EAX\n001D7289 75 07 JNZ SHORT 00_aspac.001D7292\n001D728B 53 PUSH EBX\n001D728C FF95 AD0F0000 CALL DWORD PTR SS:[EBP+0xFAD]\n001D7292 8985 A9050000 MOV DWORD PTR SS:[EBP+0x5A9],EAX ; 保存模块基地址\n001D7298 C785 AD050000&gt;MOV DWORD PTR SS:[EBP+0x5AD],0x0\n001D72A2 8B95 88040000 MOV EDX,DWORD PTR SS:[EBP+0x488] ; 获取基地址\n001D72A8 8B06 MOV EAX,DWORD PTR DS:[ESI] \t\t\t; 获取指向OrignalFirstTh\n001D72AA 85C0 TEST EAX,EAX\n001D72AC 75 03 JNZ SHORT 00_aspac.001D72B1\n001D72AE 8B46 10 MOV EAX,DWORD PTR DS:[ESI+0x10]\n001D72B1 03C2 ADD EAX,EDX \t\t\t\t\t\t\t; 计算得出 OrignalFirstT\n001D72B3 0385 AD050000 ADD EAX,DWORD PTR SS:[EBP+0x5AD] ; 0\n001D72B9 8B18 MOV EBX,DWORD PTR DS:[EAX] \t\t\t; 获取INT中的数据，即指向\n001D72BB 8B7E 10 MOV EDI,DWORD PTR DS:[ESI+0x10] \t; 获取 FirstThunk\n001D72BE 03FA ADD EDI,EDX \t\t\t\t\t\t\t; 计算得出 IAT 地址\n001D72C0 03BD AD050000 ADD EDI,DWORD PTR SS:[EBP+0x5AD] ; 0\n001D72C6 85DB TEST EBX,EBX \t\t\t\t\t\t\t; 判断结束\n001D72C8 0F84 A5000000 JE 00_aspac.001D7373\n001D72CE F7C3 00000080 TEST EBX,0x80000000 \t\t\t; 判断是否是序号\n001D72D4 75 04 JNZ SHORT 00_aspac.001D72DA\n001D72D6 03DA ADD EBX,EDX \t\t\t\t\t\t\t; 指向函数字符串结构&#x3D;INT\n001D72D8 43 INC EBX \t\t\t\t\t\t\t\t; 减去2，跳过字符串结构的\n001D72D9 43 INC EBX\n001D72DA 53 PUSH EBX \t\t\t\t\t\t\t\t; 保存寄存器环境\n001D72DB 81E3 FFFFFF7F AND EBX,0x7FFFFFFF\n001D72E1 53 PUSH EBX \t\t\t\t\t\t\t\t; 压入字符串或是序号\n001D72E2 FFB5 A9050000 PUSH DWORD PTR SS:[EBP+0x5A9]\n001D72E8 FF95 A50F0000 CALL DWORD PTR SS:[EBP+0xFA5] ; 获取函数地址\n001D72EE 85C0 TEST EAX,EAX\n001D72F0 5B POP EBX \t\t\t\t\t\t\t\t\t; 恢复寄存器环境</code></pre>\n\n<p>⑤ 修改属性，跳转原始OEP</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/UMMr0TTV.png\" alt=\"24.png\" title=\"24.png\" />\n\n<h3 id=\"脱壳分析（aspack-exe-重定位表分析）\"><a href=\"#脱壳分析（aspack-exe-重定位表分析）\" class=\"headerlink\" title=\"脱壳分析（aspack.exe 重定位表分析）\"></a>脱壳分析（aspack.exe 重定位表分析）</h3><p>根据以上分析，这个壳代码支持重定位，所以最好这个程序脱完后也支持重定位，如果感觉到麻烦可以直接执行到OEP后直接dump即可</p>\n<img src=\"https://img1.imgtp.com/2022/12/29/1OZFd4kw.png\" alt=\"25.png\" title=\"25.png\" />\n\n<img src=\"https://img1.imgtp.com/2022/12/29/AN24btzE.png\" alt=\"26.png\" title=\"26.png\" />\n\n<p>重定位表</p>\n<p>偏移16000</p>\n<p>大小0xC74</p>\n<h3 id=\"支持重定位的脱壳\"><a href=\"#支持重定位的脱壳\" class=\"headerlink\" title=\"支持重定位的脱壳\"></a>支持重定位的脱壳</h3><p>首先不能让01257238 66:830E FF OR WORD PTR DS:[ESI],0xFFFF 这条语句执行，他会让脱壳之后的程序运行找不到重定位表</p>\n","text":" 旅行者,本破站点旨在原创文章记录学习经历&amp;&amp;收集优秀资源减少学习成本，如果您又更好的想法请联系我。让我们一起传承开源精神🤓…… 知识点回顾1、PE文件的Magic code(魔数、幻数)是什么？ MZ头、PE头 2、PE文件中文件头的信息有哪些？ 运行平台、时间...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"Windows安全","slug":"Windows安全","count":4,"path":"api/categories/Windows安全.json"}],"tags":[{"name":"脱壳","slug":"脱壳","count":1,"path":"api/tags/脱壳.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">知识点回顾</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%B7%A5%E5%8A%A0%E5%A3%B3\"><span class=\"toc-text\">手工加壳</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">具体步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%8C%BA%E6%AE%B5\"><span class=\"toc-text\">添加区段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9OEP%EF%BC%8C%E5%A2%9E%E5%8A%A0OEP%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">修改OEP，增加OEP代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%AF%86%E4%BB%A3%E7%A0%81%E6%AE%B5\"><span class=\"toc-text\">加密代码段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">增加解密代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3\"><span class=\"toc-text\">脱壳</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3%E7%9A%84%E7%9B%AE%E7%9A%84%EF%BC%9A\"><span class=\"toc-text\">脱壳的目的：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3%E7%9A%84%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">脱壳的步骤：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E8%A1%A8%E5%92%8CIAT\"><span class=\"toc-text\">导入表和IAT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%B1%E8%87%AA%E5%B7%B1%E5%8A%A0%E7%9A%84%E5%A3%B3\"><span class=\"toc-text\">脱自己加的壳</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">关于压缩算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3%E4%B8%89%E6%AD%A5%E6%B3%95\"><span class=\"toc-text\">脱壳三步法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3%E4%B8%89%E6%AD%A5%E6%B3%95-%E5%AF%BB%E6%89%BEOEP%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">脱壳三步法-寻找OEP技巧</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">脱壳练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A3%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">壳代码的基本流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3-0-aspack-exe\"><span class=\"toc-text\">脱壳-0.aspack.exe</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B3%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">壳代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A3%B3OEP\"><span class=\"toc-text\">1、壳OEP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8A%A0%E8%BD%BD%E5%BF%85%E8%A6%81API\"><span class=\"toc-text\">2、加载必要API</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%A7%A3%E5%AF%86%E8%A7%A3%E5%8E%8B%E7%BC%A9%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3、解密解压缩代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BF%AE%E5%A4%8D%E9%87%8D%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">4、修复重定位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%A1%AB%E5%85%85IAT\"><span class=\"toc-text\">5、填充IAT</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%84%B1%E5%A3%B3%E5%88%86%E6%9E%90%EF%BC%88aspack-exe-%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8%E5%88%86%E6%9E%90%EF%BC%89\"><span class=\"toc-text\">脱壳分析（aspack.exe 重定位表分析）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E9%87%8D%E5%AE%9A%E4%BD%8D%E7%9A%84%E8%84%B1%E5%A3%B3\"><span class=\"toc-text\">支持重定位的脱壳</span></a></li></ol></li></ol></li></ol>","author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 玉不琢，不成器；人不学，不知道。","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"C/C++复习","uid":"c389a93a9c4f740048ca4cf923519873","slug":"C-C-复习","date":"2020-10-30T15:02:57.000Z","updated":"2022-12-30T15:12:49.615Z","comments":true,"path":"api/articles/C-C-复习.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/crrqhAeM.jpg","text":" https://github.com/hugang-first/Cpp-0-1-Resource ","link":"","photos":[],"count_time":{"symbolsCount":58,"symbolsTime":"1 mins."},"categories":[{"name":"C/C++","slug":"C-C","count":2,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++基础","slug":"C-C-基础","count":2,"path":"api/tags/C-C-基础.json"}],"author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 玉不琢，不成器；人不学，不知道。","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}},"next_post":{"title":"代码注入与拦截","uid":"c0336200d69e06897233b94f464cbc3b","slug":"代码注入与拦截","date":"2020-06-21T07:47:31.000Z","updated":"2020-08-09T04:20:21.000Z","comments":true,"path":"api/articles/代码注入与拦截.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/dLfWgNue.jpg","text":"权限权限管理 UAC机制管理方式在管理员账户下，运行一个程序，也是低权限，只有选择管理员方式运行，才会分配高权限。 调整UAC方法1：gpedit 方法2 ：设置 使用案例BOOL CMy01UACDlg::OnInitDialog() &#123; CDialogEx::OnI...","link":"","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"34 mins."},"categories":[{"name":"Windows安全","slug":"Windows安全","count":4,"path":"api/categories/Windows安全.json"}],"tags":[{"name":"Windows注入","slug":"Windows注入","count":1,"path":"api/tags/Windows注入.json"}],"author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 玉不琢，不成器；人不学，不知道。","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}}}