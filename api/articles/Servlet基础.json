{"title":"Servlet基础","uid":"8badacccd885f5f014e6790202a79164","slug":"Servlet基础","date":"2021-11-21T12:49:47.000Z","updated":"2022-12-30T15:22:48.033Z","comments":true,"path":"api/articles/Servlet基础.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/DbFoXsSB.jpg","content":"<h1 id=\"Servlet基础\"><a href=\"#Servlet基础\" class=\"headerlink\" title=\"Servlet基础\"></a>Servlet基础</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>\n<p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>\n<p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p></blockquote>\n<p>Java EE 提供了 Servlet API，通过 Servlet，我们可以处理 Web 应用程序的 HTTP 请求以及响应，关系如下：</p>\n<img src=\"https://img1.imgtp.com/2022/12/28/UVFmR2iP.jpeg\" alt=\"servlet-arch.jpeg\" title=\"servlet-arch.jpeg\" />\n\n<h2 id=\"Servlet的定义\"><a href=\"#Servlet的定义\" class=\"headerlink\" title=\"Servlet的定义\"></a>Servlet的定义</h2><p>定义 Servlet 只需要编写的类继承<code>javax.servlet.http.HttpServlet</code>类并重写<code>doGet()</code>或者<code>doPost()</code>等代表请求方式的方法即可。</p>\n<h3 id=\"HttpServlet\"><a href=\"#HttpServlet\" class=\"headerlink\" title=\"HttpServlet\"></a>HttpServlet</h3><p>先了解一下<code>HttpServlet</code>类，从图中可以看到该类继承于<code>GenericServlet</code>类</p>\n<img src=\"https://img1.imgtp.com/2022/12/28/Kit8DqsT.png\" alt=\"image-20221021111852316.png\" title=\"image-20221021111852316.png\" />\n\n<p>而<code>GenericServlet</code>类实现了<code>Servlet</code>、<code>ServletConfig</code>和<code>Serializable</code>接口<br><img src=\"https://img1.imgtp.com/2022/12/28/bThDQWiV.png\" alt=\"image-20221021112209736.png\" title=\"image-20221021112209736.png\" /></p>\n<p><code>HttpServlet</code>抽象类中含有<code>doGet/doPost/doDelete/doHead/doPut/doOptions/doTrace</code>等方法用于处理客户端的不同请求方法，因此我们在定义 Servlet 时，要重写该抽象类中的方法用于处理请求。</p>\n<h3 id=\"基于注解方式配置\"><a href=\"#基于注解方式配置\" class=\"headerlink\" title=\"基于注解方式配置\"></a>基于注解方式配置</h3><p>在 Servlet 3.0 之后可以采用注解方式配置 Servlet，在任意类导入<code>javax.servlet.annotation.WebServlet;</code></p>\n<p>在 pom.xml 文件中添加 maven 依赖：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependency&gt;\n    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.1.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>编写 ServletTest.class</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.servlet.study;\n\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n&#x2F;**\n * Created by dotast on 2022&#x2F;10&#x2F;21 10:41\n *&#x2F;\n@WebServlet(urlPatterns &#x3D; &quot;&#x2F;hello&quot;)\npublic class ServletTest extends HttpServlet &#123;\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;\n        PrintWriter out &#x3D; resp.getWriter();\n        out.write(&quot;&lt;h1&gt;Hello, dotast!&lt;&#x2F;h1&gt;&quot;);\n        out.flush();\n        out.close();\n    &#125;\n&#125;</code></pre>\n\n<p>访问<code>/hello</code>接口</p>\n<img src=\"https://img1.imgtp.com/2022/12/28/TryJqMus.png\" alt=\"image-20221021114304256.png\" title=\"image-20221021114304256.png\" />\n\n<h3 id=\"基于web-xml文件配置\"><a href=\"#基于web-xml文件配置\" class=\"headerlink\" title=\"基于web.xml文件配置\"></a>基于web.xml文件配置</h3><p>编写好 ServletTest 类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.servlet.study;\n\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n&#x2F;**\n * Created by dotast on 2022&#x2F;10&#x2F;21 10:41\n *&#x2F;\n\npublic class ServletTest extends HttpServlet &#123;\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;\n        PrintWriter out &#x3D; resp.getWriter();\n        out.write(&quot;&lt;h1&gt;Hello, dotast!&lt;&#x2F;h1&gt;&quot;);\n        out.flush();\n        out.close();\n    &#125;\n&#125;</code></pre>\n\n<p>在 web.xml 文件中配置 servlet 标签</p>\n<img src=\"https://img1.imgtp.com/2022/12/28/Kit8DqsT.png\" alt=\"image-20221021111852316.png\" title=\"image-20221021111852316.png\" />\n\n<p>启动后访问定义好的<code>url-pattern</code></p>\n<img src=\"https://img1.imgtp.com/2022/12/28/TryJqMus.png\" alt=\"image-20221021114304256.png\" title=\"image-20221021114304256.png\" />\n\n<h2 id=\"Request与Response\"><a href=\"#Request与Response\" class=\"headerlink\" title=\"Request与Response\"></a>Request与Response</h2><p>在前面我们编写的 Servlet 类中，<code>doGet()</code>方法传入了<code>HttpServletRequest</code>对象和<code>HttpServletResponse</code>对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class ServletTest extends HttpServlet &#123;\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;\n        PrintWriter out &#x3D; resp.getWriter();\n        out.write(&quot;&lt;h1&gt;Hello, dotast!&lt;&#x2F;h1&gt;&quot;);\n        out.flush();\n        out.close();\n    &#125;</code></pre>\n\n<p><code>HttpServletRequest</code>对象用于处理来自客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP 中的所有信息都封装在这个对象中，通过<code>HttpServletRequest</code>对象可以获取到客户端请求的所有信息。</p>\n<p><code>HttpServletResponse</code>对象用于响应客户端的请求，通过<code>HttpServletResponse</code>对象可以处理服务器端对客户端请求响应。</p>\n<h3 id=\"HttpServletRequest常用方法\"><a href=\"#HttpServletRequest常用方法\" class=\"headerlink\" title=\"HttpServletRequest常用方法\"></a>HttpServletRequest常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getParameter(String name)</td>\n<td>获取请求中的参数，该参数是由name指定的</td>\n</tr>\n<tr>\n<td>getParameterValues(String name)</td>\n<td>返回请求中的参数值，该参数值是由name指定的</td>\n</tr>\n<tr>\n<td>getRealPath(String path)</td>\n<td>获取Web资源目录</td>\n</tr>\n<tr>\n<td>getAttribute(String name)</td>\n<td>返回name指定的属性值</td>\n</tr>\n<tr>\n<td>getAttributeNames()</td>\n<td>返回当前请求的所有属性的名字集合</td>\n</tr>\n<tr>\n<td>getCookies()</td>\n<td>返回客户端发送的Cookie</td>\n</tr>\n<tr>\n<td>getSession()</td>\n<td>获取session回话对象</td>\n</tr>\n<tr>\n<td>getInputStream()</td>\n<td>获取请求主题的输入流</td>\n</tr>\n<tr>\n<td>getReader()</td>\n<td>获取请求主体的数据流</td>\n</tr>\n<tr>\n<td>getMethod()</td>\n<td>获取发送请求的方式，如GET、POST</td>\n</tr>\n<tr>\n<td>getParameterNames()</td>\n<td>获取请求中所有参数的名称</td>\n</tr>\n<tr>\n<td>getRemoteAddr()</td>\n<td>获取客户端的IP地址</td>\n</tr>\n<tr>\n<td>getRemoteHost()</td>\n<td>获取客户端名称</td>\n</tr>\n<tr>\n<td>getServerPath()</td>\n<td>获取请求的文件的路径</td>\n</tr>\n</tbody></table>\n<h3 id=\"HttpServletResponse常用方法\"><a href=\"#HttpServletResponse常用方法\" class=\"headerlink\" title=\"HttpServletResponse常用方法\"></a>HttpServletResponse常用方法</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getWriter()</td>\n<td>获取响应打印流对象</td>\n</tr>\n<tr>\n<td>getOutputStream()</td>\n<td>获取响应流对象</td>\n</tr>\n<tr>\n<td>addCookie(Cookie cookie)</td>\n<td>将指定的Cookie加入到当前的响应中</td>\n</tr>\n<tr>\n<td>addHeader(String name,String value)</td>\n<td>将指定的名字和值加入到响应的头信息中</td>\n</tr>\n<tr>\n<td>sendError(int sc)</td>\n<td>使用指定状态码发送一个错误到客户端</td>\n</tr>\n<tr>\n<td>sendRedirect(String location)</td>\n<td>发送一个临时的响应到客户端</td>\n</tr>\n<tr>\n<td>setDateHeader(String name,long date)</td>\n<td>将给出的名字和日期设置响应的头部</td>\n</tr>\n<tr>\n<td>setHeader(String name,String value)</td>\n<td>将给出的名字和值设置响应的头部</td>\n</tr>\n<tr>\n<td>setStatus(int sc)</td>\n<td>给当前响应设置状态码</td>\n</tr>\n<tr>\n<td>setContentType(String ContentType)</td>\n<td>设置响应的MIME类型</td>\n</tr>\n</tbody></table>\n","text":"Servlet基础概念 Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。 使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java基础","slug":"Java基础","count":1,"path":"api/categories/Java基础.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":1,"path":"api/tags/Java基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Servlet%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Servlet基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">Servlet的定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HttpServlet\"><span class=\"toc-text\">HttpServlet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">基于注解方式配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8Eweb-xml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">基于web.xml文件配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Request%E4%B8%8EResponse\"><span class=\"toc-text\">Request与Response</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HttpServletRequest%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">HttpServletRequest常用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HttpServletResponse%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">HttpServletResponse常用方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 2023新年快乐！","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"简易导航之前端必备","uid":"a7ae0256c9c3ac9cd41df0d3fab9f886","slug":"简易导航之前端必备","date":"2022-04-17T12:06:45.000Z","updated":"2023-01-02T12:23:09.354Z","comments":true,"path":"api/articles/简易导航之前端必备.json","keywords":null,"cover":"https://img1.imgtp.com/2023/01/01/0ZGibDcO.jpg","text":" Click to see more CSS颜色搭配 https://mycolor.space/ https://webgradients.com/ https://gradientbuttons.colorion.co/ https://www.eggradients.com...","link":"","photos":[],"count_time":{"symbolsCount":298,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":2,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"},{"name":"导航","slug":"导航","count":2,"path":"api/tags/导航.json"}],"author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 2023新年快乐！","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}},"next_post":{"title":"CVE-2016-4437漏洞分析","uid":"83f5599915e77d106d96bdbba8cc47db","slug":"CVE-2016-4437","date":"2021-11-09T16:18:15.000Z","updated":"2021-12-10T16:12:39.000Z","comments":true,"path":"api/articles/CVE-2016-4437.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/DipNUksO.jpg","text":"CVE-2016-4437漏洞分析前言CVE-2016-4437 是 Shiro 历史漏洞中比较著名的一个，官方编号为 Shiro-550。 影响版本：Shiro &lt; 1.2.5 漏洞描述：如果程序未能正确配置 “remember me” 功能所使用的密钥。攻击者可通过发送...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":3,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":3,"path":"api/tags/Java安全.json"}],"author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 2023新年快乐！","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}}}